import{_ as e,o as r,c as t,R as s}from"./chunks/framework.vVZmquDz.js";const p=JSON.parse('{"title":"ElementPlus多表单同时验证","description":"","frontmatter":{"title":"ElementPlus多表单同时验证","date":"2023-08-23","categories":["前端"]},"headers":[],"relativePath":"mds/front/2023-08-23-elementplus多表单验证/index.md","filePath":"mds/front/2023-08-23-elementplus多表单验证/index.md","lastUpdated":1704444471000}'),a={name:"mds/front/2023-08-23-elementplus多表单验证/index.md"},o=s('<h2 id="_1-用promise创建验证规则" tabindex="-1">1.用Promise创建验证规则 <a class="header-anchor" href="#_1-用promise创建验证规则" aria-label="Permalink to &quot;1.用Promise创建验证规则&quot;">​</a></h2><p>核心原理是利用Promise.all</p><p>const ruleVerify = ({ruleFromRef, index, errMessage = &quot;&quot;}) =&gt; {<br> return new Promise((resolve, reject) =&gt; {<br> if (!ruleFromRef) return<br> ruleFromRef.validate((valid, fields) =&gt; {<br> if (!valid) {<br> for (const key in fields) {<br> if (<em>Object</em>.prototype.hasOwnProperty.call(fields, key)) {<br> let element = fields[key][0]<br> errMessage += &#39;第&#39; + (index + 1) + &#39;行的&#39;<br> errMessage += element.message<br> reject(new <em>Error</em>(errMessage))<br> break<br> }<br> }<br> } else {<br> resolve(errMessage)<br> }<br> })<br> })<br> }</p><h2 id="_2-创建集合开始验证" tabindex="-1">2.创建集合开始验证 <a class="header-anchor" href="#_2-创建集合开始验证" aria-label="Permalink to &quot;2.创建集合开始验证&quot;">​</a></h2><p>const ruleVerifyPromiseList = []</p><p>for (const ruleFromRef of ruleFormRefs.value) {<br> const index = ruleFormRefs.value.indexOf(ruleFromRef);<br> ruleVerifyPromiseList.push(ruleVerify({<br> ruleFromRef,<br> index,<br> errMessage: &#39;&#39;<br> }))<br> }</p><p>// 多表单同时校验<br> try {<br> await <em>Promise</em>.all(ruleVerifyPromiseList)<br> } catch (e) {<br><em>ElMessage</em>.error(e.message)<br> return<br> }</p>',7),l=[o];function i(n,m,d,b,f,c){return r(),t("div",null,l)}const _=e(a,[["render",i]]);export{p as __pageData,_ as default};
