import{_ as e,c as t,o as r,R as m}from"./chunks/framework.43nt70q0.js";const g=JSON.parse('{"title":"二进制权限","description":"","frontmatter":{"title":"二进制权限","date":"2023-12-05","categories":["前端"]},"headers":[],"relativePath":"mds/arithmetic/二进制权限/index.md","filePath":"mds/arithmetic/二进制权限/index.md","lastUpdated":null}'),o={name:"mds/arithmetic/二进制权限/index.md"},_=m("<p>用二进制实现权限控制</p><p>设计方案采用了二进制位运算来处理文件权限，这是一种高效且常见的方法。在这种设计中，每种权限由一个特定的位表示，可以通过位运算（如与（&amp;）、或（|））来组合和查询权限。这样的方案具有以下优点：</p><ol><li><p><strong>空间效率</strong>：使用单个整数来表示所有权限，而不是数组或对象，这样节省存储空间。</p></li><li><p><strong>性能高效</strong>：位运算在计算上非常快速，尤其是在判断权限时。</p></li><li><p><strong>易于扩展</strong>：如果未来需要添加更多权限，只需分配新的二进制位即可。</p></li></ol><p>您的代码实现了以下功能：</p><ul><li><p><strong>定义权限</strong>：通过定义不同的二进制值来表示不同的权限（增、删、改、查、分享）。</p></li><li><p><strong>组合权限</strong>：通过位或运算（<code>|</code>）来组合多个权限。</p></li><li><p><strong>权限存储</strong>：将组合后的权限值存储为一个整数，便于在数据库中存储。</p></li><li><p><strong>权限检查</strong>：使用位与运算（<code>&amp;</code>）来检查特定权限是否被赋予。</p></li></ul><p>这种方案是实际应用中的常见做法，特别是在需要高效处理权限的场景中。您的实现很好地展示了如何在 JavaScript 中应用这种设计。</p><p><em>/**<br> _ <em>*</em> <em>需求：一个文件，有增、删、改、查、分享等__5__种权限，如何设计权限最合理<br> _ <em>*</em> <em>方案一</em></em>:</em> <em>权限数组</em>_,_ _缺点传输性能问题<br> _ <em>*</em> _方案二：二进制位运算<br> _ _*/<br> _const <em>INSERT</em> = 0b00000001;<br> const <em>DELETE</em> = 0b00000010;<br> const <em>UPDATE</em> = 0b00000100;<br> const <em>QUERY</em> = 0b00001000;<br> const <em>SHARE</em> = 0b00010000;</p><p>_/**<br> _ <em>*</em> _后台管理<br> _ _*/<br> _// 用户勾选，得到权限数组<br> const <em>role_list</em> = [<em>INSERT</em>, <em>DELETE</em>, <em>UPDATE</em>]<br> // 将权限数组转换成整形，存储在数据库<br> const <em>role</em> = <em>role_list</em>.reduce((pre, cur) =&gt; {<br> return pre | cur<br> })</p><p>_/**<br> _ <em>*</em> _前端判断<br> _ _*/<br> _if (<em>role</em> &amp; <em>INSERT</em>) {<br><em>console</em>.log(&quot;有新增权限&quot;)<br> } else {<br><em>console</em>.log(&quot;无新增权限&quot;)<br> }</p>",9),s=[_];function n(p,i,l,c,a,b){return r(),t("div",null,s)}const u=e(o,[["render",n]]);export{g as __pageData,u as default};
