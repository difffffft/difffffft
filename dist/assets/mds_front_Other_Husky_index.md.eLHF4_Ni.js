import{_ as s,c as o,o as n,U as e}from"./chunks/framework.hWf9kaa6.js";const t="/assets/image.E__sEfVI.png",q=JSON.parse('{"title":"项目中的隐藏文件夹.husky","description":"","frontmatter":{"title":"项目中的隐藏文件夹.husky","date":"2023-12-05","categories":["前端"]},"headers":[],"relativePath":"mds/front/Other/Husky/index.md","filePath":"mds/front/Other/Husky/index.md","lastUpdated":1704782344000}'),p={name:"mds/front/Other/Husky/index.md"},i=e('<p>上文提到过使用husky + commitlint来规范代码提交，让我们看看腾讯的husky规范如何写的</p><p><img src="'+t+`" alt=""></p><p><code>npx husky install</code> 是一个用于配置和初始化 <a href="https://typicode.github.io/husky/#/" target="_blank" rel="noreferrer">Husky</a> 的命令。Husky 是一个流行的工具，用于在 Git 钩子（hooks）中自动化代码质量检查，比如在提交（commit）前运行 linters 和测试。</p><p>当你运行 <code>npx husky install</code> 时，它执行以下操作：</p><ol><li><p><strong>安装 Husky：</strong> 如果你的项目中还没有安装 Husky，这个命令会安装它。</p></li><li><p><strong>创建 <code>.husky</code> 文件夹：</strong> 这个文件夹用于存储 Git 钩子的脚本。例如，你可能有一个名为 <code>pre-commit</code> 的脚本，它在每次提交之前运行以确保代码符合项目标准。</p></li><li><p><strong>配置 Git 钩子：</strong> Husky 会配置 Git 钩子，以便在特定的 Git 操作（如提交或推送）时自动运行这些脚本。</p></li></ol><p>总的来说，<code>npx husky install</code> 帮助你设置一个框架，让你能够在 Git 操作期间轻松地自动运行脚本，以提高代码质量和一致性。这对于团队项目特别有用，因为它帮助确保所有贡献者遵守相同的代码标准。所以文件夹“_”不用理会。</p><p>接下来就是最重要的三个文件，commit-msg，pre-commit，prepare-commit-msg。</p><hr><p>commit-msg的文件内容为</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>#!/bin/sh</span></span>
<span class="line"><span>. &quot;$(dirname &quot;$0&quot;)/_/husky.sh&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>if [[ &quot;$OS&quot; == &quot;Windows_NT&quot; ]]; then</span></span>
<span class="line"><span>  npx.cmd --no-install commitlint -e $GIT_PARAMS</span></span>
<span class="line"><span>else</span></span>
<span class="line"><span>  npx --no-install commitlint -e $GIT_PARAMS</span></span>
<span class="line"><span>fi</span></span></code></pre></div><p>好的，您提供的脚本内容是一个Git中的<code>commit-msg</code>钩子，使用了Husky。这个脚本的目的是用<code>commitlint</code>来强制执行提交信息的规范。这里解释一下脚本的每个部分：</p><ol><li><p><code>#!/bin/sh</code>：这是一个shebang行，它告诉系统使用shell解释器来执行这个脚本。</p></li><li><p><code>. &quot;$(dirname &quot;$0&quot;)/_/husky.sh&quot;</code>：这行代码从当前脚本位置的相对目录中导入<code>husky.sh</code>脚本。Husky使用这个来设置它的环境，并且应该被包含在所有Husky钩子中。</p></li><li><p><code>if</code>语句检查操作系统：</p><ul><li><p><code>if [[ &quot;$OS&quot; == &quot;Windows_NT&quot; ]]; then</code>：这检查脚本是否在Windows上运行。</p><ul><li><code>npx.cmd --no-install commitlint -e $GIT_PARAMS</code>：在Windows上，它使用<code>npx.cmd</code>来运行<code>commitlint</code>，并且使用<code>--no-install</code>选项来避免安装它。它通过<code>-e $GIT_PARAMS</code>将Git参数传递给<code>commitlint</code>。这是必要的，因为Windows处理命令行脚本的方式不同，经常需要对Node.js工具使用<code>.cmd</code>扩展名。</li></ul></li><li><p><code>else</code>：如果操作系统不是Windows，则假设是其他类型的系统（如Linux或macOS）。</p><ul><li><code>npx --no-install commitlint -e $GIT_PARAMS</code>：在非Windows系统上，它使用<code>npx</code>来运行<code>commitlint</code>，同样使用<code>--no-install</code>选项，并传递Git参数。这里不需要<code>.cmd</code>扩展名。</li></ul></li></ul></li></ol><hr><p>pre-commit的文件内容为</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>#!/bin/sh</span></span>
<span class="line"><span>. &quot;$(dirname &quot;$0&quot;)/_/husky.sh&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>if [[ &quot;$OS&quot; == &quot;Windows_NT&quot; ]]; then</span></span>
<span class="line"><span>  npx.cmd lint-staged</span></span>
<span class="line"><span>else</span></span>
<span class="line"><span>  npx lint-staged</span></span>
<span class="line"><span>fi</span></span></code></pre></div><p>这个 <code>pre-commit</code> 文件是一个 Git 钩子脚本，用于在每次提交之前自动执行某些任务。这个特定的脚本使用了 Husky，</p><p>这是一个工具，用于在 Git 操作（如提交、推送等）中方便地运行脚本。让我们来分解这个脚本的内容：</p><ol><li><p><strong>Shebang（<code>#!/bin/sh</code>）：</strong> 这行告诉操作系统使用 <code>/bin/sh</code>（shell）来执行这个脚本。</p></li><li><p><strong>加载 Husky 脚本（<code>. &quot;$(dirname &quot;$0&quot;)/_/husky.sh&quot;</code>）：</strong> 这行代码加载 Husky 的助手脚本。<code>$(dirname &quot;$0&quot;)</code> 是一个命令，用于获取当前脚本所在的目录。因此，<code>&quot;$(dirname &quot;$0&quot;)/_/husky.sh&quot;</code> 是指当前目录下的 <code>_/husky.sh</code> 文件。</p></li><li><p><strong>条件执行（<code>if [[ &quot;$OS&quot; == &quot;Windows_NT&quot; ]]; then ... else ... fi</code>）：</strong> 这是一个条件语句，根据操作系统的类型来执行不同的命令。这里检查的是是否在 Windows 系统上运行（<code>Windows_NT</code> 是 Windows 系统中的一个环境变量）。</p><ul><li><p>在 Windows 上，它运行 <code>npx.cmd lint-staged</code>。<code>npx.cmd</code> 是在 Windows 上运行 npx 命令的方式。</p></li><li><p>在非 Windows 系统（如 Linux 或 macOS）上，它运行 <code>npx lint-staged</code>。</p></li></ul></li><li><p><strong>lint-staged：</strong> <code>lint-staged</code> 是一个工具，用于在 Git 暂存文件上运行 linters 和其他代码质量检查工具。这意味着每次你执行提交操作时，<code>lint-staged</code> 会自动运行并检查你的代码，确保它符合预设的标准。</p></li></ol><p>总之，这个 <code>pre-commit</code> 脚本的目的是在提交代码之前自动执行代码质量检查，确保提交的代码符合项目规范。这对于维护代码库的整洁和一致性非常有帮助。</p><hr><p>prepare-commit-msg的内容为</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>#!/bin/sh</span></span>
<span class="line"><span>[[ &quot;$(uname -a)&quot; = *&quot;MINGW64&quot;* ]] &amp;&amp; exit 0</span></span>
<span class="line"><span>[ -n &quot;$CI&quot; ] &amp;&amp; exit 0</span></span>
<span class="line"><span>. &quot;$(dirname &quot;$0&quot;)/_/husky.sh&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>if [[ &quot;$OS&quot; == &quot;Windows_NT&quot; ]]; then</span></span>
<span class="line"><span>  exec &lt; /dev/tty &amp;&amp; npx.cmd git-cz --hook || true</span></span>
<span class="line"><span>else</span></span>
<span class="line"><span>  exec &lt; /dev/tty &amp;&amp; npx git-cz --hook || true</span></span>
<span class="line"><span>fi</span></span></code></pre></div><p>这个 <code>prepare-commit-msg</code> 脚本是另一个 Git 钩子，它在提交消息被创建但在用户编辑它之前运行。这个脚本同样利用 Husky 来集成其功能。以下是脚本内容的解析：</p><ol><li><p><strong>Shebang（<code>#!/bin/sh</code>）：</strong> 这指定了脚本应该使用 <code>/bin/sh</code>（shell）执行。</p></li><li><p><strong>环境检查：</strong></p><ul><li><p><code>[[ &quot;$(uname -a)&quot; = *&quot;MINGW64&quot;* ]] &amp;&amp; exit 0</code>：这一行检查是否在 MINGW64 环境下运行（一种在 Windows 上提供 Unix 环境的工具）。如果是，脚本会立即退出，不执行后续操作。</p></li><li><p><code>[ -n &quot;$CI&quot; ] &amp;&amp; exit 0</code>：这检查是否有 <code>CI</code>（持续集成）环境变量设置。如果设置了，脚本同样会立即退出。这通常用于避免在自动化的 CI 过程中运行此脚本。</p></li></ul></li><li><p><strong>加载 Husky 脚本（<code>. &quot;$(dirname &quot;$0&quot;)/_/husky.sh&quot;</code>）：</strong> 这一行加载 Husky 的助手脚本，位于当前脚本所在目录下的 <code>_/husky.sh</code>。</p></li><li><p><strong>条件执行：</strong></p><ul><li>在 Windows 系统上，它执行 <code>exec &lt; /dev/tty &amp;&amp; npx.cmd git-cz --hook || true</code>。</li><li>在非 Windows 系统上，它执行 <code>exec &lt; /dev/tty &amp;&amp; npx git-cz --hook || true</code>。</li></ul><p>这些命令的作用是启动 <code>git-cz</code> 工具。<code>git-cz</code> 是一个常用于生成符合<a href="https://www.conventionalcommits.org/" target="_blank" rel="noreferrer">约定式提交</a>标准的提交信息的工具。<code>exec &lt; /dev/tty</code> 确保用户可以交互式地输入提交信息，而 <code>--hook</code> 参数表示这个命令是从 Git 钩子调用的。最后的 <code>|| true</code> 确保即使 <code>git-cz</code> 命令失败，脚本也不会返回错误状态。</p></li><li><p><strong>操作系统特定命令：</strong></p><ul><li>在 Windows 上，它使用 <code>npx.cmd</code> 而不是 <code>npx</code>。这是因为在 Windows 的某些环境下，需要特别指定 <code>.cmd</code> 扩展名来正确运行命令。</li></ul></li></ol><p>总结来说，这个 <code>prepare-commit-msg</code> 脚本用于在用户提交代码之前，自动启动 <code>git-cz</code> 工具来帮助用户生成标准化的提交信息。这有助于保持项目提交记录的整洁和一致性。</p>`,25),a=[i];function c(d,l,u,m,r,h){return n(),o("div",null,a)}const k=s(p,[["render",c]]);export{q as __pageData,k as default};
